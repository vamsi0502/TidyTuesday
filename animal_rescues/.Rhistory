7 %in% input
i=1
i=2
input[-2]
twoSum = function(input, target){
for(i in 1:length(input)){
rem = target-i
if(rem %in% input[-i]==T){
id1 = i
id2 = which(input == rem)
return(c(id1, id2))
}
else{
return("no possible")
}
}
}
twoSum(input, target)
input
target
twoSum = function(input, target){
for(i in 1:length(input)){
rem = target-input[i]
if(rem %in% input[-i]==T){
id1 = i
id2 = which(input == rem)
return(c(id1, id2))
}
else{
return("no possible")
}
}
}
twoSum(input, target)
twoSum(input, 4)
twoSum(input, 17)
install.packages(binom)
install.packages('binom\')
.
/
\
s
asdaf
)
()
&
*
install.packages('binom')
library(binom)
?binom.confint
binom.confint(x = c(2, 4), n = 100, method = "all")
round(0.2 + qnorm(p = c(alpha/2, 1-alpha/2)) *
sqrt(n) / (n+qnorm(p = 1-alpha/2)^2) * sqrt(pi.hat*(1-
pi.hat) + qnorm(1-alpha/2)^2/(4*n)), 4)
alpha = 0.9
round(p.tilde + qnorm(p = c(alpha/2, 1-alpha/2)) *
sqrt(n) / (n+qnorm(p = 1-alpha/2)^2) * sqrt(pi.hat*(1-
pi.hat) + qnorm(1-alpha/2)^2/(4*n)), 4)
p.tilde = 0.2
round(p.tilde + qnorm(p = c(alpha/2, 1-alpha/2)) *
sqrt(n) / (n+qnorm(p = 1-alpha/2)^2) * sqrt(pi.hat*(1-
pi.hat) + qnorm(1-alpha/2)^2/(4*n)), 4)
n = 10
round(p.tilde + qnorm(p = c(alpha/2, 1-alpha/2)) *
sqrt(n) / (n+qnorm(p = 1-alpha/2)^2) * sqrt(pi.hat*(1-
pi.hat) + qnorm(1-alpha/2)^2/(4*n)), 4)
# Initial settings
alpha<-0.10
pi<-0.2
# pi<-0.156
n<-10
w<-0:n
pi.hat<-w/n
pmf<-dbinom(x = w, size = n, prob = pi)
lower<-pi.hat -  qnorm(p = c(alpha/2, 1-alpha/2)) *
sqrt(n) / (n+qnorm(p = 1-alpha/2)^2) * sqrt(pi.hat*(1-pi.hat) + qnorm(1-alpha/2)^2/(4*n)), 4)
lower<-pi.hat -  qnorm(p = c(alpha/2, 1-alpha/2)) *
sqrt(n) / (n+qnorm(p = 1-alpha/2)^2) * sqrt(pi.hat*(1-pi.hat) + qnorm(1-alpha/2)^2/(4*n))
upper<-pi.hat +  qnorm(p = c(alpha/2, 1-alpha/2)) *
sqrt(n) / (n+qnorm(p = 1-alpha/2)^2) * sqrt(pi.hat*(1-pi.hat) + qnorm(1-alpha/2)^2/(4*n))
save<-ifelse(test = pi>lower, yes = ifelse(test = pi<upper, yes = 1, no = 0), no = 0)
sum(save*pmf)
data.frame(w, pi.hat, round(data.frame(pmf, lower, upper),4), save)[1:13,]
data.frame(w, pi.hat, round(data.frame(pmf, lower, upper),4), save)[1:10,]
# For pi = 0.157
sum(dbinom(x = 4:11, size = n, prob = pi))
# Initial settings
alpha<-0.90
lower<-pi.hat -  qnorm(p = c(alpha/2, 1-alpha/2)) *
sqrt(n) / (n+qnorm(p = 1-alpha/2)^2) * sqrt(pi.hat*(1-pi.hat) + qnorm(1-alpha/2)^2/(4*n))
upper<-pi.hat +  qnorm(p = c(alpha/2, 1-alpha/2)) *
sqrt(n) / (n+qnorm(p = 1-alpha/2)^2) * sqrt(pi.hat*(1-pi.hat) + qnorm(1-alpha/2)^2/(4*n))
save<-ifelse(test = pi>lower, yes = ifelse(test = pi<upper, yes = 1, no = 0), no = 0)
sum(save*pmf)
data.frame(w, pi.hat, round(data.frame(pmf, lower, upper),4), save)[1:10,]
# Initial settings
alpha<-0.10
lower<-pi.hat -  qnorm(p = c(alpha/2, 1-alpha/2)) *
sqrt(n) / (n+qnorm(p = 1-alpha/2)^2) * sqrt(pi.hat*(1-pi.hat) + qnorm(1-alpha/2)^2/(4*n))
upper<-pi.hat +  qnorm(p = c(alpha/2, 1-alpha/2)) *
sqrt(n) / (n+qnorm(p = 1-alpha/2)^2) * sqrt(pi.hat*(1-pi.hat) + qnorm(1-alpha/2)^2/(4*n))
save<-ifelse(test = pi>lower, yes = ifelse(test = pi<upper, yes = 1, no = 0), no = 0)
sum(save*pmf)
lower<-pi.hat -  qnorm(p = c(1-alpha/2)) *
sqrt(n) / (n+qnorm(p = 1-alpha/2)^2) * sqrt(pi.hat*(1-pi.hat) + qnorm(1-alpha/2)^2/(4*n))
upper<-pi.hat +  qnorm(p = c(1-alpha/2)) *
sqrt(n) / (n+qnorm(p = 1-alpha/2)^2) * sqrt(pi.hat*(1-pi.hat) + qnorm(1-alpha/2)^2/(4*n))
save<-ifelse(test = pi>lower, yes = ifelse(test = pi<upper, yes = 1, no = 0), no = 0)
sum(save*pmf)
data.frame(w, pi.hat, round(data.frame(pmf, lower, upper),4), save)[1:10,]
binom.confint(x = 370, n = 1170,  conf.level = 0.99)
w = 370
n = 1170
alpha = 0.01
p. tilde <- (w + qnorm (p = 1- alpha /2) ^2 / 2) / (n + qnorm (p =
1- alpha /2) ^2)
p. tilde <- (w + qnorm (p = 1- alpha /2) ^2 / 2) / (n + qnorm (p =1- alpha /2) ^2)
p.tilde <- (w + qnorm (p = 1- alpha /2) ^2 / 2) / (n + qnorm (p =1- alpha /2) ^2)
pi.hat = w/n
round (p. tilde + qnorm (p = c( alpha /2, 1- alpha /2) ) * sqrt (n) / (n+ qnorm (p = 1- alpha /2) ^2) * sqrt (pi.hat *(1 - pi. hat) + qnorm (p =                                                                                                                                              1- alpha /2) ^2/(4* n)), 4)
round (p.tilde + qnorm (p = c( alpha /2, 1- alpha /2) ) * sqrt (n) / (n+ qnorm (p = 1- alpha /2) ^2) * sqrt (pi.hat *(1 - pi. hat) + qnorm (p =                                                                                                                                              1- alpha /2) ^2/(4* n)), 4)
round (p.tilde + qnorm (p = c( alpha /2, 1- alpha /2) ) * sqrt (n) / (n+ qnorm (p = 1- alpha /2) ^2) * sqrt (pi.hat *(1 - pi.hat) + qnorm (p =1- alpha /2) ^2/(4* n)), 4)
install.packages('PropCIs')
library(PropCIs)
alpha = 0.1
n1 = 20
n2 = 20
pi1 = 0.2
pi2 = 0.2
w.all = expand.grid(w1= 0:n1, w2 = 0:n2)
pi.hat1 = (0:n1)/n1
pi.hat2 = (0:n2)/n2
pi.hat.all = expand.grid(pi.hat1 = pi.hat1, pi.hat2 = pi.hat2)
prob .w1 <- dbinom (x = 0:n1 , size = n1 , prob = pi1)
prob .w2 <- dbinom (x = 0:n2 , size = n2 , prob = pi2)
prob.w1 <- dbinom (x = 0:n1 , size = n1 , prob = pi1)
prob.w2 <- dbinom (x = 0:n2 , size = n2 , prob = pi2)
prob.all <- expand.grid( prob.w1 = prob.w1 , prob.w2 = prob.w2)
pmf =  prob.all$prob.w1*prob.all$prob.w2
head(data.frame(w.all, pmf = round(pmf, 4)))
# Agresti-Caffo
pi1tilde<-(0:n1+1)/(n1+2)
pi2tilde<-(0:n2+1)/(n2+2)
pi.all.tilde<-expand.grid(pi1tilde = pi1tilde, pi2tilde = pi2tilde)
var.ac<-pi.all.tilde[,1]*(1-pi.all.tilde[,1]) / (n1+2) +
pi.all.tilde[,2]*(1-pi.all.tilde[,2]) / (n2+2)
lower.AC<-pi.all.tilde[,1] - pi.all.tilde[,2] - qnorm(p = 1-alpha/2) * sqrt(var.ac)
upper.AC<-pi.all.tilde[,1] - pi.all.tilde[,2] + qnorm(p = 1-alpha/2) * sqrt(var.ac)
save.AC<-ifelse(test = pi1-pi2 > lower.AC,
yes = ifelse(test = pi1-pi2 < upper.AC, yes = 1, no = 0), no = 0)
sum(save.AC*pmf)
data.frame(w.all, round(data.frame(pmf, lower, upper),4), save)[1:15,]  #Example
c.table = array(data = c(189, 104, 10845, 10933), dim = c(2, 2), dimnames = list(c("Placebo", "Aspirin"), c("Yes", "No")))
c.table
rowSums(c.table)
pi.hat.table = c.table/rowSums(c.table)
pi.hat.table
prop.test(c.table, 0.95, correct = False)
prop.test(c.table, 0.95, correct = F)
chisq.test(c.table, correct = F)
?chisq.test
?prop.test
prop.test(c.table, 0.95, correct = F, alternative = "less")
prop.test(c.table, 0.95, correct = F, alternative = "greater")
citation(pa)
citation(package = "RaProR")
citation(package = "glmnet")
print(citation(package = "glmnet"), bibtex = T)
sign(0)
sin(1)
sign(1)
sign(-1)
sign(-4)
placekick<-read.table(file = "../Desktop/UNL/Spring 2021/STAT 875/Chapter 2/Placekick.csv", header = TRUE, sep = ",")
head(placekick)
tail(placekick)
mod.fit2<-glm(formula = good ~ elap30, family = binomial(link = logit), data = placekick)
summary(mod.fit2)
library(car)
Anova(mod.fit2, test.statistic = "LR")
library(devtools)
devtools::install_github('yihui/xfun')
blogdown::install_hugo()
rm(list = ls())
library(plotrix)
draw.circle(1,1,1, nv = 100)
plot.new()
draw.circle(1,1,1, nv = 100)
draw.circle(1,1,0.5, nv = 100)
plot(1:5, seq(1,10,5))
plot(1:5, seq(1,10,length5))
plot(1:5, seq(1,10,length=5))
draw.circle(1,1,0.5, nv = 100)
draw.circle(2,3,0.5, nv = 100)
x = runif(100, -6, -3)
y = runif(100, -1, 1)
plot(x,y)
id = which(x^2 + y^2 < 16)
id1 = sample(id, 25)
plot(x[id1], y[id1], ylim = c(-6,6), xlim = c(-6, 6), col =  "green", xlab = "X", ylab = "Y")
y = sqrt(1-(x-3)^2)
x = runif(100, -6, -3)
head(x)
(head(x)-3)
(head(x)-3)^2
1-(head(x)-3)^2
1-(head(x)+3)^2
x = runif(100, -4, -2)
y = sqrt(1-(x-3)^2)
y = sqrt(1-(x+3)^2)
plot(x,y)
plot(x,y, xlim = c(-6,6), asp = 1)
plot(x,jitter(y), xlim = c(-6,6), asp = 1)
plot(x,jitter(y))
plot(x,jitter(y))
plot(jitter(x),jitter(y))
library(tidyverse)
library("fpc")
install.packages("fpc")
library("fpc")
library(factoextra)
install.packages("factoextra")
install.packages("factoextra")
options(repr.plot.width=8, repr.plot.height=5)
set.seed(123)   #for reproducibility
sizes <- c(25, 100, 25)
centers <- data_frame(x = c(1, 4, 6), y = c(-1, 0, 1), n = sizes,
cluster = factor(1:3))
library(factoextra)
centers <- data_frame(x = c(1, 4, 6), y = c(-1, 0, 1), n = sizes,
cluster = factor(1:3))
centers <- data.frame(x = c(1, 4, 6), y = c(-1, 0, 1), n = sizes,
cluster = factor(1:3))
centers
df1 <- centers %>% group_by(cluster) %>%
do(data.frame(x = rnorm(.$n, .$x), y = rnorm(.$n, .$y)))
library(tidyverse)
centers <- data_frame(x = c(1, 4, 6), y = c(-1, 0, 1), n = sizes,
cluster = factor(1:3))
centers
df1 <- centers %>% group_by(cluster) %>%
do(data.frame(x = rnorm(.$n, .$x), y = rnorm(.$n, .$y)))
head(df1)
plot(df1$x, df1$y, col = df1$cluster)
centers <- data_frame(x = c(-4, 0, 4), y = c(-1, 0, -1), n = sizes,
cluster = factor(1:3))
df1 <- centers %>% group_by(cluster) %>%
do(data.frame(x = rnorm(.$n, .$x), y = rnorm(.$n, .$y)))
plot(df1$x, df1$y, col = df1$cluster)
km<- kmeans(df1, centers= 3)
df1$cluster = as.character(km$cluster)
df1 %>% ggplot(aes(x = x, y = y, color  = cluster)) + geom_point() +
ggtitle('R: Kmeans of unevenly sized clusters') +
theme(axis.title = element_text(size=14), plot.title =
element_text(size = 16,colour="darkblue",hjust = 0.5))
data = data.frame()
for(i in 1:length(sizes)){
data = rbind(data, data.frame(x = rnorm(centers$n[i], centers$x[i],  1), y = rnorm(centers$n[i], centers$y[i],  1)))
}
head(data()
)
head(data)
plot(data$x, data$y)
data = data.frame()
for(i in 1:length(sizes)){
data = rbind(data, data.frame(x = rnorm(centers$n[i], centers$x[i],  1),
y = rnorm(centers$n[i], centers$y[i],  1),
cluster = i))
}
plot(data$x, data$y, col = data$cluster)
1%2
1//2
1%%2
2%%2
data = data.frame()
for(i in 1:length(sizes)){
data = rbind(data, data.frame(x = rnorm(centers$n[i], centers$x[i],  ifelse(i%%2= 0, 1, 0.2)),
y = rnorm(centers$n[i], centers$y[i],  ifelse(i%%2= 0, 1, 0.2)),
cluster = i))
}
data = data.frame()
for(i in 1:length(sizes)){
data = rbind(data, data.frame(x = rnorm(centers$n[i], centers$x[i],  ifelse(i%%2== 0, 1, 0.2)),
y = rnorm(centers$n[i], centers$y[i],  ifelse(i%%2== 0, 1, 0.2)),
cluster = i))
}
plot(data$x, data$y, col = data$cluster)
data = data.frame()
for(i in 1:length(sizes)){
data = rbind(data, data.frame(x = rnorm(centers$n[i], centers$x[i],  ifelse(i%%2== 0, 1, 0.4)),
y = rnorm(centers$n[i], centers$y[i],  ifelse(i%%2== 0, 1, 0.4)),
cluster = i))
}
plot(data$x, data$y, col = data$cluster)
plot(data$x, data$y, col = data$cluster, xlim = c(-5,5), asp = 1, xlab = "X", ylab = "Y")
cl =  kmeans(data, centers= 3)
plot(data$x,  data$y,  col = cl$cluster, xlim = c(-5, 5), asp = 1, xlab = "X", ylab = "Y")
data = data.frame()
for(i in 1:length(sizes)){
data = rbind(data, data.frame(x = rnorm(centers$n[i], centers$x[i],  ifelse(i%%2== 0, 1, 1)),
y = rnorm(centers$n[i], centers$y[i],  ifelse(i%%2== 0, 1, 1)),
cluster = i))
}
plot(data$x, data$y, col = data$cluster, xlim = c(-5,5), asp = 1, xlab = "X", ylab = "Y")
cl =  kmeans(data, centers= 3)
plot(data$x,  data$y,  col = cl$cluster, xlim = c(-5, 5), asp = 1, xlab = "X", ylab = "Y")
data = data.frame()
for(i in 1:length(sizes)){
data = rbind(data, data.frame(x = rnorm(centers$n[i], centers$x[i],  ifelse(i%%2== 0, 1, 0.5)),
y = rnorm(centers$n[i], centers$y[i],  ifelse(i%%2== 0, 1, 0.5)),
cluster = i))
}
plot(data$x, data$y, col = data$cluster, xlim = c(-5,5), asp = 1, xlab = "X", ylab = "Y")
cl =  kmeans(data, centers= 3)
plot(data$x,  data$y,  col = cl$cluster, xlim = c(-5, 5), asp = 1, xlab = "X", ylab = "Y")
set.seed(123)   #for reproducibility
sizes <- c(25, 500, 50)
centers <- data.frame(x = c(-4, 0, 4), y = c(-1, 0, 1), n = sizes, cluster = factor(1:3))
data = data.frame()
for(i in 1:length(sizes)){
data = rbind(data, data.frame(x = rnorm(centers$n[i], centers$x[i],  ifelse(i%%2== 0, 1, 1)),
y = rnorm(centers$n[i], centers$y[i],  ifelse(i%%2== 0, 1, 1)),
cluster = i))
}
plot(data$x, data$y, col = data$cluster, xlim = c(-5,5), asp = 1, xlab = "X", ylab = "Y")
cl =  kmeans(data, centers= 3)
plot(data$x,  data$y,  col = cl$cluster, xlim = c(-5, 5), asp = 1, xlab = "X", ylab = "Y")
plot(c1)
set.seed(123)
n = 500
c1 = data.frame(x = rnorm(n), y = rnorm(n))
plot(c1)
c2 = data.frame(r = rnorm(n, 5, 0.25), theta = runif(n,  0, 2*pi), x = r*cos(theta), y = r*sin(theta)) %>% dplyr::select(x,y)
c2 = data_frame(r = rnorm(n, 5, 0.25), theta = runif(n,  0, 2*pi), x = r*cos(theta), y = r*sin(theta)) %>% dplyr::select(x,y)
plot(c2)
data = rbind(cbind(c1, cluster = 1), cbind(c2, cluster =  2))
head(data)
tail(data)
plot(data$x, data$y, col = data$cluster)
cl2 = kmeans(data, centers = 2)
plot(data$x,  data$y,  col = cl2$cluster, xlab = "X", ylab = "Y")
data = rbind(cbind(c1, cluster = 1), cbind(c2, cluster =  2))
plot(data$x, data$y, col = data$cluster, lab = "X", ylab = "Y")
plot(data$x, data$y, col = data$cluster, xlab = "X", ylab = "Y")
cl2 = kmeans(data, centers = 2)
plot(data$x,  data$y,  col = cl2$cluster, xlab = "X", ylab = "Y")
plot(data$x,  data$y,  col = cl2$cluster, pty = cl2$cluster,xlab = "X", ylab = "Y")
plot(data$x, data$y, col = data$cluster, xlab = "X", ylab = "Y", pty =  cl2$cluster)
plot(data$x, data$y, col = data$cluster, xlab = "X", ylab = "Y", pch =  cl2$cluster)
plot(data$x, data$y, col = data$cluster, xlab = "X", ylab = "Y", pch =  data$cluster)
cl2 = kmeans(data, centers = 2)
plot(data$x,  data$y,  col = cl2$cluster, pch = cl2$cluster, xlab = "X", ylab = "Y")
set.seed(123)
n = 100
c1 = data.frame(x = rnorm(n), y = rnorm(n))
c2 = data_frame(r = rnorm(n, 5, 0.25), theta = runif(n,  0, 2*pi), x = r*cos(theta), y = r*sin(theta)) %>% dplyr::select(x,y)
data = rbind(cbind(c1, cluster = 1), cbind(c2, cluster =  2))
plot(data$x, data$y, col = data$cluster, xlab = "X", ylab = "Y", pch =  data$cluster)
cl2 = kmeans(data, centers = 2)
plot(data$x,  data$y,  col = cl2$cluster, pch = cl2$cluster, xlab = "X", ylab = "Y")
n = 250
c1 = data.frame(x = rnorm(n), y = rnorm(n))
c2 = data_frame(r = rnorm(n, 5, 0.25), theta = runif(n,  0, 2*pi), x = r*cos(theta), y = r*sin(theta)) %>% dplyr::select(x,y)
data = rbind(cbind(c1, cluster = 1), cbind(c2, cluster =  2))
plot(data$x, data$y, col = data$cluster, xlab = "X", ylab = "Y", pch =  data$cluster)
cl2 = kmeans(data, centers = 2)
n = 150
c1 = data.frame(x = rnorm(n), y = rnorm(n))
c2 = data_frame(r = rnorm(n, 5, 0.25), theta = runif(n,  0, 2*pi), x = r*cos(theta), y = r*sin(theta)) %>% dplyr::select(x,y)
data = rbind(cbind(c1, cluster = 1), cbind(c2, cluster =  2))
plot(data$x, data$y, col = data$cluster, xlab = "X", ylab = "Y", pch =  data$cluster)
cl2 = kmeans(data, centers = 2)
plot(data$x,  data$y,  col = cl2$cluster, pch = cl2$cluster, xlab = "X", ylab = "Y")
plot(data$x, data$y, col = data$cluster, xlab = "X", ylab = "Y", pch =  c(16, 18))
plot(data$x, data$y, col = data$cluster, xlab = "X", ylab = "Y", pch =  c(1, 18))
plot(data$x, data$y, col = data$cluster, xlab = "X", ylab = "Y", pch =  data$cluster)
dim(c1)
plot(data$x, data$y, col = data$cluster, xlab = "X", ylab = "Y", pch =  c(rep(1, 150), rep(17, 150)))
plot(data$x,  data$y,  col = cl2$cluster, pch = cl2$cluster, xlab = "X", ylab = "Y")
plot(data$x,  data$y,  col = cl2$cluster, pch = c(rep(1, 150), rep(17, 150)), xlab = "X", ylab = "Y")
plot(data$x, data$y, col = data$cluster, xlab = "X", ylab = "Y", pch =  data$cluster)
cl2 = kmeans(data, centers = 2)
plot(data$x,  data$y,  col = cl2$cluster, pch = cl2$cluster, xlab = "X", ylab = "Y")
par(mfrow = c(1,2))
plot(data$x, data$y, col = data$cluster, xlim = c(-5,5), asp = 1, xlab = "X", ylab = "Y", main = "Original Points")
plot(data$x,  data$y,  col = cl$cluster, xlim = c(-5, 5), asp = 1, xlab = "X", ylab = "Y", main = "K-means (3 cluster)")
set.seed(123)   #for reproducibility
sizes <- c(25, 500, 50)
centers <- data.frame(x = c(-4, 0, 4), y = c(-1, 0, 1), n = sizes, cluster = factor(1:3))
data = data.frame()
for(i in 1:length(sizes)){
data = rbind(data, data.frame(x = rnorm(centers$n[i], centers$x[i],  ifelse(i%%2== 0, 1, 1)),
y = rnorm(centers$n[i], centers$y[i],  ifelse(i%%2== 0, 1, 1)),
cluster = i))
}
plot(data$x, data$y, col = data$cluster, xlim = c(-5,5), asp = 1, xlab = "X", ylab = "Y")
cl =  kmeans(data, centers= 3)
plot(data$x,  data$y,  col = cl$cluster, xlim = c(-5, 5), asp = 1, xlab = "X", ylab = "Y")
par(mfrow = c(1,2))
plot(data$x, data$y, col = data$cluster, xlim = c(-5,5), asp = 1, xlab = "X", ylab = "Y", main = "Original Points")
plot(data$x,  data$y,  col = cl$cluster, xlim = c(-5, 5), asp = 1, xlab = "X", ylab = "Y", main = "K-means (3 cluster)")
par(mfrow = c(1,2))
plot(data$x, data$y, col = data$cluster, xlim = c(-5,5), ylim = c(-5,5), xlab = "X", ylab = "Y", main = "Original Points")
plot(data$x,  data$y,  col = cl$cluster, xlim = c(-5, 5), ylim = c(-5,5), xlab = "X", ylab = "Y", main = "K-means (3 cluster)")
par(mfrow = c(1,2), pty = s)
par(mfrow = c(1,2), pty = "s")
plot(data$x, data$y, col = data$cluster, xlim = c(-5,5), ylim = c(-5,5), xlab = "X", ylab = "Y", main = "Original Points")
plot(data$x,  data$y,  col = cl$cluster, xlim = c(-5, 5), ylim = c(-5,5), xlab = "X", ylab = "Y", main = "K-means (3 cluster)")
set.seed(123)
n = 150
c1 = data.frame(x = rnorm(n), y = rnorm(n))
c2 = data_frame(r = rnorm(n, 5, 0.25), theta = runif(n,  0, 2*pi), x = r*cos(theta), y = r*sin(theta)) %>% dplyr::select(x,y)
data = rbind(cbind(c1, cluster = 1), cbind(c2, cluster =  2))
cl2 = kmeans(data, centers = 2)
par(mfrow = c(1,2), pty = "s")
plot(data$x, data$y, col = data$cluster, xlab = "X", ylab = "Y", pch =  data$cluster, main = "Original Points")
plot(data$x,  data$y,  col = cl2$cluster, pch = cl2$cluster, xlab = "X", ylab = "Y", main = "K-means (2 cluster)")
par(mfrow = c(1,2), pty = "s")
plot(data$x, data$y, col = data$cluster, xlab = "X", ylab = "Y", pch =  data$cluster, main = "Original Points")
plot(data$x,  data$y,  col = cl2$cluster, pch = cl2$cluster, xlab = "X", main = "K-means (2 cluster)")
plot(data$x,  data$y,  col = cl2$cluster, pch = cl2$cluster, xlab = "X", ylab = "", main = "K-means (2 cluster)")
par(mfrow = c(1,2), pty = "s")
plot(data$x, data$y, col = data$cluster, xlab = "X", ylab = "Y", pch =  data$cluster, main = "Original Points")
plot(data$x,  data$y,  col = cl2$cluster, pch = cl2$cluster, xlab = "X", ylab = "", main = "K-means (2 cluster)")
par(mfrow = c(1,2), pty = "s", mai = c(0.1, 0.1, 0.1, 0.1))
plot(data$x, data$y, col = data$cluster, xlab = "X", ylab = "Y", pch =  data$cluster, main = "Original Points")
par(mfrow = c(1,2), pty = "s", mai = c(0.5, 0.5, 0.5, 0.5))
plot(data$x, data$y, col = data$cluster, xlab = "X", ylab = "Y", pch =  data$cluster, main = "Original Points")
plot(data$x,  data$y,  col = cl2$cluster, pch = cl2$cluster, xlab = "X", ylab = "", main = "K-means (2 cluster)")
par(mfrow = c(1,2), pty = "s", mai = c(0.5, 0.5, 0.5, 0.3))
plot(data$x, data$y, col = data$cluster, xlab = "X", ylab = "Y", pch =  data$cluster, main = "Original Points")
plot(data$x,  data$y,  col = cl2$cluster, pch = cl2$cluster, xlab = "X", ylab = "", main = "K-means (2 cluster)")
par(mfrow = c(1,2), pty = "s", mai = c(0.5, 0.5, 0.5, 0.25))
plot(data$x, data$y, col = data$cluster, xlab = "X", ylab = "Y", pch =  data$cluster, main = "Original Points")
plot(data$x,  data$y,  col = cl2$cluster, pch = cl2$cluster, xlab = "X", ylab = "", main = "K-means (2 cluster)")
par(mfrow = c(1,2), pty = "s", mai = c(0.75, 0.5, 0.5, 0.25))
plot(data$x, data$y, col = data$cluster, xlab = "X", ylab = "Y", pch =  data$cluster, main = "Original Points")
plot(data$x,  data$y,  col = cl2$cluster, pch = cl2$cluster, xlab = "X", ylab = "", main = "K-means (2 cluster)")
par(mfrow = c(1,2), pty = "s", mai = c(1, 0.5, 0.5, 0.25))
plot(data$x, data$y, col = data$cluster, xlab = "X", ylab = "Y", pch =  data$cluster, main = "Original Points")
plot(data$x,  data$y,  col = cl2$cluster, pch = cl2$cluster, xlab = "X", ylab = "", main = "K-means (2 cluster)")
par(mfrow = c(1,2), pty = "s", mai = c(2, 0.5, 0.5, 0.25))
plot(data$x, data$y, col = data$cluster, xlab = "X", ylab = "Y", pch =  data$cluster, main = "Original Points")
plot(data$x,  data$y,  col = cl2$cluster, pch = cl2$cluster, xlab = "X", ylab = "", main = "K-means (2 cluster)")
par(mfrow = c(1,2), pty = "s", mai = c(0.5, 1, 0.5, 0.25))
plot(data$x, data$y, col = data$cluster, xlab = "X", ylab = "Y", pch =  data$cluster, main = "Original Points")
plot(data$x,  data$y,  col = cl2$cluster, pch = cl2$cluster, xlab = "X", ylab = "", main = "K-means (2 cluster)")
par(mfrow = c(1,2), pty = "s", mai = c(0.5, 0.75, 0.5, 0.25))
plot(data$x, data$y, col = data$cluster, xlab = "X", ylab = "Y", pch =  data$cluster, main = "Original Points")
par(mfrow = c(1,2), pty = "s", mai = c(0.5, 0.5, 0.5, 0.25))
plot(data$x, data$y, col = data$cluster, xlab = "X", ylab = "Y", pch =  data$cluster, main = "Original Points")
par(mfrow = c(1,2), pty = "s", mai = c(0.5, 0.8, 0.5, 0.25))
plot(data$x, data$y, col = data$cluster, xlab = "X", ylab = "Y", pch =  data$cluster, main = "Original Points")
par(mai = c(0.5, 0.5, 0.5, 0.25))
plot(data$x,  data$y,  col = cl2$cluster, pch = cl2$cluster, xlab = "X", ylab = "", main = "K-means (2 cluster)")
par(mfrow = c(1,2), pty = "s", mai = c(0.5, 0.8, 0.5, 0.25))
plot(data$x, data$y, col = data$cluster, xlab = "X", ylab = "Y", pch =  data$cluster, main = "Original Points")
par(mai = c(0.5, 0.8, 0.5, 0.25))
plot(data$x,  data$y,  col = cl2$cluster, pch = cl2$cluster, xlab = "X", ylab = "", main = "K-means (2 cluster)")
par(mfrow =  c(1,1))
plot(data$x,  data$y,  col = cl2$cluster, pch = cl2$cluster, xlab = "X", ylab = "Y")
par(mfrow =  c(1,1), mai = c(1,1,1,1))
plot(data$x,  data$y,  col = cl2$cluster, pch = cl2$cluster, xlab = "X", ylab = "Y")
rm(list = ls())
load("C:/Users/vamsi/OneDrive - University of Nebraska-Lincoln/Research/Multitype_Classification/Chickpea_data/MKSrT.rda")
dim(MKSrT)
MKSrT[1:5, 1:10]
install.packages("tidytuesdayR")
library(tidytuesdayR)
tuesdata = tt_load(2021, week 27)
tuesdata = tt_load(2021, week= 27)
animal_rescues = tuesdata$animal_rescues
dim(animal_rescues)
animal_rescues[1:5, 1:5]
setwd("C:/Users/vamsi/Desktop/UNL/Pet_Projects/tidytuesdays/animal_rescues/")
write.csv(animal_rescues, "animal_rescues.csv")
rm(list = ls())
setwd("C:/Users/vamsi/Desktop/UNL/Pet_Projects/tidytuesdays/animal_rescues/")
data = read.csv("animal_rescues.csv", header = T)
library(tidyverse)
df = data.frame(abc = 1, xyz = "a")
df
df$x
df[,"xyz"]
df[,c("abc", "xyz")]
df = tibble(abc = 1, xyz = "a")
df
df$x
df$xyz
df[,"xyz"]
df[,"abc"]
data = read_csv("animal_rescues.csv", header = T)
data = read_csv("animal_rescues.csv")
data
people <- tribble(
~name,             ~names,  ~values,
#-----------------|--------|------
"Phillip Woods",   "age",       45,
"Phillip Woods",   "height",   186,
"Phillip Woods",   "age",       50,
"Jessica Cordero", "age",       37,
"Jessica Cordero", "height",   156
)
people
people %>% pivot_wider(names_from = names, values_from = values)
data = read_csv("animal_rescues.csv")
data
install.packages("here")
library(here)
install.packages("DataExplorer")
glimpse(data)
library(DataExplorer)
